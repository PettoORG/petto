import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:petto/users/domain/user.dart';

/// Base DTO class that all DTOs should extend. Besides specified methods,
/// this factories should be implement too (Dart doesn't allow factories since
/// constructors are not part of an interface):
///
/// 1. fromJson factory, to create DTO from JSON object.
/// 2. fromDocumentSnapshot factory, to create DTO from Firestore fromDocumentSnapshot.
/// 3. fromDomain factory, to create DTO from Domain object.
abstract class BaseDTO<T> {
  /// Returns an object suited to be sent to Firestore. It must remove the 'id'
  /// field if it's present.
  Map<String, dynamic> toDocument();

  /// Returns a Firestore Document from the DTO with proper data to create a new
  /// document in Firestore. It must remove the 'id' field if it's present.
  Map<String, dynamic> toCreateDocument(User user);

  /// Returns a Firestore Document from the DTO with proper data to update a
  /// document in Firestore. It must remove the 'id' field if it's present.
  Map<String, dynamic> toUpdateDocument(User user);

  /// Returns a Domain object from the DTO.
  T toDomain();

  /// Returns a JSON object from the DTO. It's generated by freezed.
  Map<String, dynamic> toJson();
}

/// Base DTO factory to create DTOs from JSON objects.
abstract mixin class FromJsonFactory<T> {
  BaseDTO<T> fromJson(Map<String, dynamic> json);
}

/// Base DTO factory to create DTOs from Firestore DocumentSnapshots.
abstract mixin class FromDocumentSnapshotFactory<T> {
  BaseDTO<T> fromDocumentSnapshot(DocumentSnapshot doc);
}

/// Base DTO factory to create DTOs from Domain objects.
abstract mixin class FromDomainFactory<T> {
  BaseDTO<T> fromDomain(T entity);
}
